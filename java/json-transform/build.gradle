import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

plugins {
    id 'java-library'
    id 'signing'
    id "com.vanniktech.maven.publish" version "0.34.0"
    id 'me.champeau.jmh' version '0.7.1'
}

group 'ai.bizone'
version = System.getenv("VERSION")

ext {
    gsonVersion = "2.10.1"
    jsonVersion = '20240303'
    jsonPathVersion = "2.9.0"
    jmhVersion = "1.36"
    jacksonBindVersion = "2.17.1"
    jsonSmartVersion = "2.5.2"
    snakeYamlVersion = "2.9"
    aiBizoneShortUuidVersion = "1.0.0"
    slf4jVersion = "2.0.11"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "ai.bizone:short-uuid:${aiBizoneShortUuidVersion}"

    /** Logging **/
    compileOnly "org.slf4j:slf4j-api:${slf4jVersion}"

    /** JSON **/
    compileOnly "com.google.code.gson:gson:${gsonVersion}"
    compileOnly "com.fasterxml.jackson.core:jackson-databind:${jacksonBindVersion}"
    compileOnly "net.minidev:json-smart:${jsonSmartVersion}"
    implementation "org.json:json:${jsonVersion}" // for XML conversion
    implementation "com.jayway.jsonpath:json-path:${jsonPathVersion}"

    /* YAML */
    implementation "org.snakeyaml:snakeyaml-engine:${snakeYamlVersion}"

    /** JMH (Benchmarking)  **/
    jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "com.google.code.gson:gson:${gsonVersion}"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonBindVersion}"
    testImplementation "net.minidev:json-smart:${jsonSmartVersion}"
}

jar { archiveClassifier = '' }

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt

test {
    useJUnitPlatform()
}

jmh {
    includeTests = true // include 'test' module as dependency
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}

// NOTE: this is done automatically by mavenPublishing.configure
//java {
//    withJavadocJar()
//    withSourcesJar()
//}

javadoc {
    options.showAll()
    options.encoding('UTF-8')
    options.addStringOption('Xdoclint:none', '-quiet')
    (options as StandardJavadocDocletOptions).tags("apiNote:a:API Note:")
}

mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
    publishToMavenCentral(true)
    signAllPublications()

    coordinates("${project.group}", 'json-transform', "${version}")

    pom {
        name = 'json-transform'
        description = 'Library for JSON transformation'
        inceptionYear = "2024"
        url = 'https://github.com/Bizone-ai/json-transform'
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            }
        }
        developers {
            developer {
                id = "elisherer"
                name = "Eli Sherer"
                url = "https://github.com/elisherer/"
            }
        }
        scm {
            url = 'https://github.com/Bizone-ai/json-transform'
            connection = 'scm:git://github.com/Bizone-ai/json-transform.git'
            developerConnection = 'scm:git://github.com/Bizone-ai/json-transform.git'
        }
    }
}
